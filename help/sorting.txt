// Сортировка выбором
// n - количество элементов массива (для полной сортировки)
void selectionSort(YourType *a, int n)
{
	for (int i = 0; i < n - 1; i++) {
		int m = i;
		for (int j = i + 1; j < n; j++)
			if (a[j] < a[m]) m = j;
		YourType temp;
		temp = a[m];
		a[m] = a[i];
		a[i] = temp;
	}
}

// Вызов процедуры сортировки
selectionSort(book, n);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Быстрая сортировка (сортировка Хоара)
// Данный образец сортирует массив целочисленного типа данных
// L, R - границы сортировки, изначально для полной сортировки передавать L = 0, R = array length - 1
void quickSort(YourType *a, int L, int R)
{
	int i = L;
	int j = R;
	int x = a[(L + R) / 2];
	while (i <= j) {
		while (a[i] < x)  i++;
		while (a[j] > x)  j--;
		if (i <= j) {
			YourType temp;
			temp = a[i];
			a[i] = a[j];
			a[j] = temp;
			i++;
			j--;
		}
	}
	if (i < R) quickSort(a, i, R);
	if (j > L) quickSort(a, L, j);
}

// Вызов процедуры сортировки, где n - количество элементов массива
quickSort(array, 0, n - 1);