// Однонаправленная очередь
struct Queue {
	int info;
	Queue *next;
} *b, *e;

// Процедуры вставки значения в конец однонаправленной очереди
void push(Queue **b, Queue **e, int in) {
	Queue *t = new Queue;
	t->info = in;
	t->next = NULL;
	if (*b == NULL)
		*b = *e = t;
	else {
		(*e)->next = t;
		*e = t;
	}
}

// Вызов процедуры push для однонаправленной очереди
// temp - значение, которое мы вставляем
push(&b, &e, temp);

// Процедура просмотра элементов однонаправленной очереди
void view(Queue *b)
{
	Queue *t = b;
	while (t != NULL) {
		printf("%d%c", t->info, ' ');
		t = t->next;
	}
	printf("\n");
}

// Вызов процедуры view
view(b);

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Двунаправленная очередь
// *b, *e - указатели на начало (левая граница) и конец (правая граница) очереди соответственно
struct Queue {
	int info;
	Queue *prev, *next;
} *b, *e;

// Сначала создадим и проинициализируем очередь значением
// То есть для первого вставляемого числа выполняем create(), для последующих - push()
// in - вставляемое значение
void create(Queue **b, Queue **e, int in) {
	Queue *t = new Queue;
	t->info = in;
	t->next = t->prev = NULL;
	*b = *e = t;
}

// Процедуры вставки значения в конец двунаправленной очереди
// side - напрвление вставки, где 0 - вставка справа, любое другое число - слева
// in - вставляемое значение
void push(int side, Queue **b, Queue **e, int in) {
	Queue *t = new Queue;
	t->info = in;
	if (side) {
		t->next = NULL;
		t->prev = *e;
		(*e)->next = t;
		*e = t;
	} else {	
		t->prev = NULL;
		t->next = *b;
		(*b)->prev = t;
		*b = t;
	}
}

// Процедура просмотра элементов однонаправленной очереди
// direction - направление просмотра очереди, где 0 - справа-налево, любое другое число - слева-направо
// От direction зависит, что мы будем отправлять в процедуру!
// Если просмотр с "конца" (справа-налево), то отправляем Queue e
// Если просмотр с "начала" (слева-направо), то отправляем Queue b
void view(int direction, Queue *t) {
	while (t != NULL) {
		printf("%d%c", t->info, ' ');
		if (direction) {
			t = t->next;
		} else {
			t = t->prev;
		}
	}
	printf("\n");
}

// Вызов view
view(1, b); // Слева-направо
view(0, e); // Справа-налево